##-*- Mode: CPerl -*-

##======================================================================
## Header Administrivia
##======================================================================

our $VERSION = '0.01';
pp_setversion($VERSION);

##------------------------------------------------------
## pm additions
pp_addpm({At=>'Top'},<<'EOPM');

use strict;

=pod

=head1 NAME

PDL::Ngrams - Basic N-Gram utilities for PDL

=head1 SYNOPSIS

 use PDL;
 use PDL::Ngrams;

 ##---------------------------------------------------------------------
 ## ... stuff happens

=cut

EOPM
## /pm additions
##------------------------------------------------------

##------------------------------------------------------
## Exports: None
#pp_export_nothing();

##------------------------------------------------------
## Includes / defines
pp_addhdr(<<'EOH');
EOH


##======================================================================
## C Utilities
##======================================================================
# (none)

##======================================================================
## PDL::PP Wrappers
##======================================================================

##======================================================================
## The Guts
##======================================================================

pp_addpm(<<'EOPM');

=pod

=head1 The Guts

=cut

EOPM

##------------------------------------------------------
## rlevec()
pp_def('rlevec',
       Pars => 'c(M,N); int [o]a(N); [o]b(M,N)',
       Code =><<'EOC',
  int cn,bn=0, sn=$SIZE(N), matches;
  loop (M) %{ $b(N=>0)=$c(N=>0); %}
  $a(N=>0) = 1;
  for (cn=1; cn<sn; cn++) {
     matches=1;
     loop (M) %{
       if ($c(N=>cn) != $b(N=>bn)) {
         matches=0;
         break;
       }
     %}
     if (matches) {
       $a(N=>bn)++;
     } else {
       bn++;
       loop (M) %{ $b(N=>bn) = $c(N=>cn); %}
       $a(N=>bn) = 1;
     }
   }
   for (bn++; bn<sn; bn++) {
     $a(N=>bn) = 0;
     loop (M) %{ $b(N=>bn) = 0; %}
   }
EOC
       Doc =><<'EOD',
q(Run-length encode a set of vectors.

Akin to a higher-order rle(), for use with qsortvec().

Given set of vectors $c, generate a vector $a with the number of occurrences of each element
(where an "element" is a vector of length $M ocurring in $c),
and a set of vectors $b containing the unique values.
As for rle(), only the elements up to the first instance of 0 in $a should be considered.

Can be used together with rotate(), cat(), append(), and qsortvec() to count N-grams
over a 1d PDL.

See also: PDL::Slices::rle, PDL::Ufunc::qsortvec, PDL::Primitive::uniqvec

EOD

);


##------------------------------------------------------
## rldvec()
pp_def('rldvec',
       Pars => 'int a(N); b(M,N); [o]c(M,N)',
       PMCode=><<'EOC',
sub PDL::rldvec {
  my ($a,$b) = @_; 
  my ($c);
  if ($#_==2) { $c=$_[2]; }
  else {
# XXX Need to improve emulation of threading in auto-generating c
    my ($rowlen) = $b->dim(0);
    my ($size) = $a->sumover->max;
    my (@dims) = $a->dims;
    shift(@dims);
    $c = $b->zeroes($rowlen,$size,@dims);
  }
  &PDL::_rldvec_int($a,$b,$c);
  return $c;
}
EOC
       Code =><<'EOC',
  int i,nrows,bn,cn=0, sn=$SIZE(N);
  for (bn=0; bn<sn; bn++) {
    nrows = $a(N=>bn);
    for (i=0; i<nrows; i++) {
      loop (M) %{ $c(N=>cn) = $b(N=>bn); %}
      cn++;
    }
   }
EOC
       Doc =><<'EOD'
Run-length decode a set of vectors, akin to a higher-order rld().

Given a vecot $a() of the number of occurrences of each row, and a set $c()
of row-vectors each of length $M, run-length decode to $c().

See also: PDL::Slices::rld.

EOD

  );


##======================================================================
## Footer Administrivia
##======================================================================

##------------------------------------------------------
## pm additions
pp_addpm(<<'EOPM');

##---------------------------------------------------------------------
=pod

=head1 ACKNOWLEDGEMENTS

Perl by Larry Wall.

PDL by Karl Glazebrook, Tuomas J. Lukka, Christian Soeller, and others.

Code for rlevec() and rldvec() derived from the PDL builtin functions
rle() and rld() in Basic/Slices/slices.pd.

=cut

##----------------------------------------------------------------------
=pod

=head1 KNOWN BUGS

Probably many.

=cut


##---------------------------------------------------------------------
=pod

=head1 AUTHOR

Bryan Jurish E<lt>moocow@ling.uni-potsdam.deE<gt>

=head2 Copyright Policy

Copyright (C) 2007, Bryan Jurish. All rights reserved.

This package is free software, and entirely without warranty.
You may redistribute it and/or modify it under the same terms
as Perl itself.

=head1 SEE ALSO

perl(1), PDL(3perl)

=cut

EOPM


# Always make sure that you finish your PP declarations with
# pp_done
pp_done();
##----------------------------------------------------------------------
